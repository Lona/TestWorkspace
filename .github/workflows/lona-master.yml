name: Lona Production

on:
  push:
    branches:
      - master

jobs:
  build:
    runs-on: macos-latest

    steps:
      - name: Get the latest version of the repository
        uses: actions/checkout@v1

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: "12.x"

      - name: Bump the workspace version
        id: tag_version
        uses: mathieudutour/github-tag-action@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          default_bump: patch

      - name: Check if Lona is enabled on this repo
        id: lona
        uses: Lona/lona-github-action@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow_succeeded: ${{ job.status == 'Success' }}
          ref_name: refs/tags/${{ steps.tag_version.outputs.new_tag || steps.tag_version.outputs.previous_tag }}

      - name: Restore the dependencies cache
        uses: actions/cache@preview
        with:
          path: node_modules
          key: ${{ runner.os }}-node

      - name: Install the Lona Compiler
        # Skip post-install scripts here, as a malicious
        # script could steal NODE_AUTH_TOKEN.
        run: npm install lonac @lona/workspace-to-sketch-library --ignore-scripts
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Extract the list of design tokens
        run: ./node_modules/.bin/lonac flatten --workspace . > ${{ steps.lona.outputs.output_folder }}/flat-json.json

      - name: Generate the Sketch library
        run: 'node -e "require(''@lona/workspace-to-sketch-library'').default(process.cwd(), ''${{ steps.lona.outputs.output_folder }}/sketch-library.sketch'', { logFunction: console.log.bind(console) }).catch(err => { console.log(err); process.exit(1); })"'

      - name: Create a GitHub release
        id: create_release
        uses: actions/create-release@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.tag_version.outputs.new_tag }}
          release_name: Release ${{ steps.tag_version.outputs.new_tag }}
          draft: "false"
          prerelease: "false"

      - name: Publish the Sketch Library to the release
        id: upload_sketch_library
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.lona.outputs.output_folder }}/sketch-library.sketch
          asset_name: library.sketch
          asset_content_type: application/zip

      - name: Publish the design tokens to the release
        uses: actions/upload-release-asset@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.lona.outputs.output_folder }}/flat-json.json
          asset_name: tokens.json
          asset_content_type: application/json

      - name: Generate the documentation website
        uses: Lona/lona-docs-github-action@v1
        with:
          output_folder: ${{ steps.lona.outputs.output_folder }}

      - name: Generate and publish npm package
        run: |
          echo "//npm.pkg.github.com/:_authToken=${{ secrets.GITHUB_TOKEN }}" > ~/.npmrc
          ./node_modules/.bin/lonac workspace --workspace . --target js --output ./__secret_npm_output
          cd __secret_npm_output
          echo "{ \"name\": \"@${${{ github.repository }},,}\", \"version\": \"${{ steps.tag_version.outputs.new_version }}\", \"publishConfig\": { \"registry\": \"https://npm.pkg.github.com/\" }, \"repository\": \"git://github.com/${{ github.repository }}\" }" >> package.json
          npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
